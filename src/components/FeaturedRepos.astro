---
import { request } from '@octokit/request';
import type { Endpoints } from '@octokit/types';
import { Icon } from 'astro-icon';

export type Props = {
  class?: string;
};

type listUserReposResponse =
  Endpoints[`GET /users/{username}/repos`]['response'];
type repoLanguagesResponse =
  Endpoints[`GET /repos/{owner}/{repo}/languages`]['response'];

const res = await request(`GET /users/{username}/repos{?type,sort,direction}`, {
  headers: {
    authorization: `token ${import.meta.env.GITHUB_API_TOKEN}`,
  },
  username: 'jeffwinegar',
  sort: 'updated',
});

const reposData: listUserReposResponse['data'] = res.data;

const repos = Promise.all(
  reposData
    .filter((repo) => !repo.fork && !repo.archived)
    .sort((a, b) => {
      const r1: number = a.watchers_count ? a.watchers_count : 0;
      const r2: number = b.watchers_count ? b.watchers_count : 0;

      return r2 - r1;
    })
    .slice(0, 4)
    .map(
      async ({
        id,
        name,
        description,
        html_url,
        forks_count,
        stargazers_count,
      }) => {
        const res = await request(`GET /repos/{owner}/{repo}/languages`, {
          headers: {
            authorization: `token ${import.meta.env.GITHUB_API_TOKEN}`,
          },
          owner: 'jeffwinegar',
          repo: name,
        });
        const langsObj: repoLanguagesResponse['data'] = res.data;
        const totalSize = Object.values(langsObj).reduce((a, b) => a + b, 0);
        const languages = Object.entries(langsObj).map(([key, val]) => ({
          totalSize,
          name: key,
          size: val,
        }));

        return {
          id,
          name,
          description,
          html_url,
          forks_count,
          stargazers_count,
          languages,
        };
      }
    )
);

const featuredRepos = await repos;

const { class: className = '' } = Astro.props;
---

<ol class={className} role="list">
  {
    featuredRepos.map((repo) => {
      const stars_count = repo.stargazers_count ? repo.stargazers_count : 0;
      const forks_count = repo.forks_count ? repo.forks_count : 0;
      return (
        <li>
          <a href={repo.html_url}>{repo.name}</a>
          <p class="description">{repo.description}</p>
          <p class="metadata">
            {repo.languages.map((lang) => (
              <span>
                <span class="lang">{lang.name}</span>
                <span>
                  {Math.round((lang.size / lang.totalSize) * 100 * 10) / 10 ||
                    0}%
                </span>
              </span>
            ))}
            {stars_count > 0 ? (
              <span>
                <Icon
                  aria-label={stars_count > 1 ? 'stars' : 'star'}
                  role="img"
                  name="octicon:star-16"
                  width="16"
                  height="16"
                />{' '}
                {stars_count}
              </span>
            ) : null}
            {forks_count > 0 ? (
              <span>
                <Icon
                  aria-label={forks_count > 1 ? 'forks' : 'fork'}
                  role="img"
                  name="octicon:repo-forked-16"
                  width="16"
                  height="16"
                />{' '}
                {forks_count}
              </span>
            ) : null}
          </p>
        </li>
      );
    })
  }
</ol>

<style>
  ol {
    display: grid;
    gap: 1em;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    padding: 0;
  }

  li {
    align-content: stretch;
    border-radius: 4px;
    border: solid 1px var(--border-subtle);
    color: var(--text-secondary);
    display: flex;
    flex-flow: column nowrap;
    font-size: 1rem;
    padding: 1em;
  }

  li > :not(.metadata) {
    line-height: calc(1ex / 0.36);
  }

  a {
    color: var(--text-link);
    display: block;
    font-size: 1em;
    font-weight: 600;
    text-decoration-color: transparent;
  }
  a:where(:hover, :focus) {
    text-decoration-color: currentColor;
  }

  .description {
    flex: 1 0 auto;
    font-size: 0.875em;
    margin-block: calc(1ex / 0.68) calc(1ex / 0.48);
  }

  .metadata {
    font-size: 0.75em;
    margin: 0;
  }
  .metadata * {
    display: inline-block;
  }
  .metadata > :not(:only-child):not(:last-child) {
    margin-inline-end: 1em;
  }
  .lang {
    font-weight: 600;
  }
  [astro-icon] {
    aspect-ratio: 1/1;
    vertical-align: text-bottom;
    width: 1.1666666667em;
  }
</style>
