---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import PostMeta from '@components/PostMeta.astro';
import TableOfContents from '@components/TableOfContents.astro';
import { Icon } from 'astro-icon';
import type { InferGetStaticPropsType } from 'astro';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');

  return allPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props;
const { title, date, share, toc } = post.data;
const { Content, headings } = await post.render();
---

<Layout
  title={`${title} - Jeff Winegar`}
  seoMeta={{
    type: 'article',
    title: title,
    description: share.description,
    image: share.image,
  }}
>
  <div>
    <a class="icon-link" href="/" aria-label="back to home">
      <Icon
        aria-hidden="true"
        role="img"
        name="octicon:reply-16"
        width="16"
        height="16"
      /> Back
    </a>
  </div>
  <article class="grid-container">
    <header>
      <PostMeta date={date} content={post.body} />
      <h1>{title}</h1>
    </header>

    {toc ? <TableOfContents headings={headings} /> : null}

    <Content />
  </article>
</Layout>

<style is:global>
  /* Content styles */
  pre.shiki {
    --_code-color-meta: var(--color-gray-30);
    --_code-highlight-background: #3b4252; /* https://www.nordtheme.com/docs/colors-and-palettes */
    --_code-line-height: calc(1ex / 0.32);

    border-radius: 0.25rem;
    display: grid;
    grid-column: 1 / -1;
    grid-template-columns: auto 1fr;
    margin-block: calc(1ex / 0.64);
    overflow: hidden;
  }

  code {
    font-size: 0.7777777778em;
  }

  pre.shiki code {
    display: block;
    line-height: var(--_code-line-height);
  }

  :not(.code-container) > code {
    background-color: var(--surface-secondary);
    border-radius: 0.125rem;
    border: solid 1px var(--border-minimal);
    line-height: 1;
    padding: 0.25rem 0.3125rem;
  }

  .code-container {
    display: inline-flex;
    grid-area: 2 / 1 / auto / -1;
    overflow-x: auto;
    padding-block: 0.75rem 0.875rem;
  }

  .code-title,
  .language-id {
    color: var(--_code-color-meta);
    font-size: 0.7222222222em;
    grid-row: 1;
    inset-inline-start: 0;
    padding-block: 0.375ch;
  }
  .code-title {
    background-color: var(--_code-highlight-background);
    padding-inline: 1ch 1.75ch;
  }
  .language-id {
    grid-column: 2;
    padding-inline: 1ch;
    text-align: right;
  }

  code .line {
    min-block-size: var(--_code-line-height);
    padding-inline: 1rem;
  }

  .callout > * {
    border-inline-start: solid 0.25em var(--border-subtle);
    color: var(--text-secondary);
    font-size: 0.9444444444em;
    font-style: italic;
    padding-block-end: 0.3125em;
    padding-inline: 0.75em 0.5em;
  }
</style>

<style>
  [astro-icon] {
    aspect-ratio: 1/1;
    width: 1.1666666667em;
  }
  :not(.icon-link) > [astro-icon] {
    vertical-align: text-bottom;
  }

  div:first-of-type {
    margin-block-end: calc(1ex / 0.32);
    padding-inline: 1.0875rem;
  }

  .icon-link {
    align-items: center;
    color: var(--text-link);
    display: flex;
    font-size: 1rem;
    gap: 0.25em;
    text-decoration-color: var(--text-link-decoration);
    transition: text-decoration 250ms ease;
    width: fit-content;
  }
  .icon-link:where(:hover, :focus) {
    text-decoration-color: currentColor;
  }

  header h1,
  header :global(+ *) {
    margin-block-start: 0;
  }
</style>
